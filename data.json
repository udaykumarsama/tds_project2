[
    {
        "question": "Install and run Visual Studio Code. In your Terminal (or Command Prompt), type code -s and press Enter. Copy and paste the entire output below. What is the output of code -s?",
        "code": "yes",
        "type": "gitbash"
    },
    {
        "question": "Running uv run --with httpie -- https [URL] installs the Python package httpie and sends a HTTPS request to the URL. \nSend a HTTPS request to https://httpbin.org/get with the URL encoded parameter email set to aakash.gorla@gramener.com \nWhat is the JSON output of the command? (Paste only the JSON body, not the headers)",
        "code": "no",
        "type": null
    },
    {
        "question": "Let's make sure you know how to use npx and prettier.\nDownload\n\n. In the directory where you downloaded it, make sure it is called README.md, and run npx -y prettier@3.4.2 README.md | sha256sum.\nWhat is the output of the command?",
        "code": "yes",
        "type": "gitbash"
    },
    {
        "question": "Let's make sure you know how to use JSON. Sort this JSON array of objects by the value of the age field. In case of a tie, sort by the name field. Paste the resulting JSON below without any spaces or newlines.\n[{\"name\":\"Alice\",\"age\":86},{\"name\":\"Bob\",\"age\":69},{\"name\":\"Charlie\",\"age\":25},{\"name\":\"David\",\"age\":44},{\"name\":\"Emma\",\"age\":42},{\"name\":\"Frank\",\"age\":76},{\"name\":\"Grace\",\"age\":15},{\"name\":\"Henry\",\"age\":84},{\"name\":\"Ivy\",\"age\":1},{\"name\":\"Jack\",\"age\":4},{\"name\":\"Karen\",\"age\":25},{\"name\":\"Liam\",\"age\":39},{\"name\":\"Mary\",\"age\":51},{\"name\":\"Nora\",\"age\":34},{\"name\":\"Oscar\",\"age\":39},{\"name\":\"Paul\",\"age\":74}]",
        "code": "no",
        "type": null
    },
    {
        "question": "Download q-multi-cursor-json.txt and use multi-cursors and convert it into a single JSON object, where key=value pairs are converted into {key: value, key: value, ...}. \nWhat's the result when you paste the JSON at tools-in-data-science.pages.dev/jsonhash and click the Hash button?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": " Let's make sure you know how to select elements using CSS selectors. Find all <div>s having a foo class in the hidden element below. What's the sum of their data-value attributes?",
        "code": "no",
        "type": null
    },
    {
        "question": "Let's make sure you can write formulas in Google Sheets. Type this formula into Google Sheets. (It won't work in Excel)\n=SUM(ARRAY_CONSTRAIN(SEQUENCE(100, 100, 1, 4), 1, 10))\nWhat is the result?",
        "code": "no",
        "type": null
    },
    {
        "question": "Let's make sure you can write formulas in Excel. Type this formula into Excel.\n\nNote: This will ONLY work in Office 365.\n\n=SUM(TAKE(SORTBY({14,4,6,13,13,0,5,7,13,13,13,3,11,6,14,13}, {10,9,13,2,11,8,16,14,7,15,5,4,6,1,3,12}), 1, 13))\nWhat is the result?",
        "code": "no",
        "type": null
    },
    {
        "question": "Download and process the files in q-unicode-data.zip which contains three files with different encodings: \n data1.csv: CSV file encoded in CP-1252 \n data2.csv: CSV file encoded in UTF-8 \n data3.txt: Tab-separated file encoded in UTF-16 \n Each file has 2 columns: symbol and value. Sum up all the values where the symbol matches œ OR ˜ across all three files. \n What is the sum of all values associated with these symbols?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": " Let's make sure you know how to use GitHub. Create a GitHub account if you don't have one. Create a new public repository. Commit a single JSON file called email.json with the value {\"email\": \"krishna.kumar@gramener.com\"} and push it.\nEnter the raw Github URL of email.json so we can verify it. (It might look like https://raw.githubusercontent.com/[GITHUB ID]/[REPO NAME]/main/email.json.)",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Just above this paragraph, there's a hidden input with a secret value.\n\n What is the value in the hidden input?",
        "code": "no",
        "type": null
    },
    {
        "question": "Download q-replace-across-all-files.zip and unzip it into a new folder, then replace all \"IITM\" (in upper, lower, or mixed case) with \"IIT Madras\" in all files. Leave everything as-is - don't change the line endings. What does running cat * | sha256sum in that folder show in bash? ",
        "code": "yes",
        "type": "gitbash"
    },
    {
        "question": "How many Wednesdays are there in the date range 1988-10-04 to 2017-06-07?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download and unzip file q-extract-csv-zip.zip which has a single extract.csv file inside.\n\nWhat is the value in the\"answer\" column of the CSV file?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download q-list-files-attributes.zip and extract it. Use ls with options to list all files in the folder along with their date and file size. What's the total size of all files at least 7253 bytes large and modified on or after Sun, 14 Jun, 2020, 7:07 am IST? ",
        "code": "yes",
        "type": "gitbash"
    },
    {
        "question": " Let's make sure you know how to select elements using CSS selectors. Find all <div>s having a foo class in the hidden element below. What's the sum of their data-value attributes?",
        "code": "no",
        "type": null
    },
    {
        "question": "Download q-move-rename-files.zip and extract it. Use mv to move all files under folders into an empty folder. Then rename all files replacing each digit with the next. 1 becomes 2, 9 becomes 0, a1b9c.txt becomes a2b0c.txt.\nWhat does running grep . * | LC_ALL=C sort | sha256sum in bash on that folder show? ",
        "code": "yes",
        "type": "gitbash"
    },
    {
        "question": "Download q-compare-files.zip and extract it. It has 2 nearly identical files, a.txt and b.txt, with the same number of lines.\nHow many lines are different between a.txt and b.txt? ",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "There is a tickets table in a SQLite database that has columns type, units, and price. Each row is a customer bid for a concert ticket.\ntype\tunits\tprice\nSilver\t627\t1.16\nSILVER\t425\t0.88\nSilver\t608\t1.47\nBRONZE\t880\t1.64\nbronze\t862\t0.75",
        "code": "no",
        "type": null
    },
    {
        "question": "Write documentation in Markdown for an **imaginary** analysis of the number of steps you walked each day for a week, comparing over time and with friends. The Markdown must include:\n\nTop-Level Heading: At least 1 heading at level 1, e.g., # Introduction\nSubheadings: At least 1 heading at level 2, e.g., ## Methodology\nBold Text: At least 1 instance of bold text, e.g., **important**\nItalic Text: At least 1 instance of italic text, e.g., *note*\nInline Code: At least 1 instance of inline code, e.g., sample_code\nCode Block: At least 1 instance of a fenced code block, e.g.\n\nprint(\"Hello World\")\nBulleted List: At least 1 instance of a bulleted list, e.g., - Item\nNumbered List: At least 1 instance of a numbered list, e.g., 1. Step One\nTable: At least 1 instance of a table, e.g., | Column A | Column B |\nHyperlink: At least 1 instance of a hyperlink, e.g., [Text](https://example.com)\nImage: At least 1 instance of an image, e.g., ![Alt Text](https://example.com/image.jpg)\nBlockquote: At least 1 instance of a blockquote, e.g., > This is a quote",
        "code": "no",
        "type": null
    },
    {
        "question": "Download the image below and compress it losslessly to an image that is less than 1,500 bytes. By losslessly, we mean that every pixel in the new image should be identical to the original image.",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Publish a page using GitHub Pages that showcases your work. Ensure that your email address krishna.kumar@gramener.com is in the page's HTML.\n\nGitHub pages are served via CloudFlare which obfuscates emails. So, wrap your email address inside a:\n\n<!--email_off-->krishna.kumar@gramener.com<!--/email_off-->\nWhat is the GitHub Pages URL? It might look like: https://[USER].github.io/[REPO]/",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Let's make sure you can access Google Colab. Run this program on Google Colab, allowing all required access to your email ID: krishna.kumar@gramener.com.\n\nimport hashlib\nimport requests\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\nauth.authenticate_user()\ncreds = GoogleCredentials.get_application_default()\ntoken = creds.get_access_token().access_token\nresponse = requests.get(\n  \"https://www.googleapis.com/oauth2/v1/userinfo\",\n  params={\"alt\": \"json\"},\n  headers={\"Authorization\": f\"Bearer {token}\"}\n)\nemail = response.json()[\"email\"]\nhashlib.sha256(f\"{email} {creds.token_expiry.year}\".encode()).hexdigest()[-5:]\nWhat is the result? (It should be a 5-character string)",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download this image. Create a new Google Colab notebook and run this code (after fixing a mistake in it) to calculate the number of pixels with a certain minimum brightness:\n\nimport numpy as np\nfrom PIL import Image\nfrom google.colab import files\nimport colorsys\n\n# There is a mistake in the line below. Fix it\nimage = Image.open(list(files.upload().keys)[0])\n\nrgb = np.array(image) / 255.0\nlightness = np.apply_along_axis(lambda x: colorsys.rgb_to_hls(*x)[1], 2, rgb)\nlight_pixels = np.sum(lightness > 0.529)\nprint(f'Number of pixels with lightness > 0.529: {light_pixels}')\nWhat is the result? (It should be a number)",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download q-vercel-python.json which has the marks of 100 imaginary students.\n\nCreate and deploy a Python app to Vercel. Expose an API so that when a request like https://your-app.vercel.app/api?name=X&name=Y is made, it returns a JSON response with the marks of the names X and Y in the same order, like this:\n\n{ \"marks\": [10, 20] }\nMake sure you enable CORS to allow GET requests from any origin.\n\nWhat is the Vercel URL? It should look like: https://your-app.vercel.app/api",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Create a GitHub action on one of your GitHub repositories. Make sure one of the steps in the action has a name that contains your email address krishna.kumar@gramener.com. For example:\n\njobs:\n  test:\n    steps:\n      - name: krishna.kumar@gramener.com\n        run: echo \"Hello, world!\"\n      \nTrigger the action and make sure it is the most recent action.\n\nWhat is your repository URL? It will look like: https://github.com/USER/REPO",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Create and push an image to Docker Hub. Add a tag named krishna.kumar to the image.\n\nWhat is the Docker image URL? It should look like: https://hub.docker.com/repository/docker/$USER/$REPO/general",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download q-fastapi.csv. This file has 2-columns:\n\nstudentId: A unique identifier for each student, e.g. 1, 2, 3, ...\nclass: The class (including section) of the student, e.g. 1A, 1B, ... 12A, 12B, ... 12Z\nWrite a FastAPI server that serves this data. For example, /api should return all students data (in the same row and column order as the CSV file) as a JSON like this:\n\n{\n  \"students\": [\n    {\n      \"studentId\": 1,\n      \"class\": \"1A\"\n    },\n    {\n      \"studentId\": 2,\n      \"class\": \"1B\"\n    }, ...\n  ]\n}\nIf the URL has a query parameter class, it should return only students in those classes. For example, /api?class=1A should return only students in class 1A. /api?class=1A&class=1B should return only students in class 1A and 1B. There may be any number of classes specified. Return students in the same order as they appear in the CSV file (not the order of the classes).\n\nMake sure you enable CORS to allow GET requests from any origin.\n\nWhat is the API URL endpoint for FastAPI? It might look like: http://127.0.0.1:8000/api",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Download Llamafile. Run the Llama-3.2-1B-Instruct.Q6_K.llamafile model with it.\n\nCreate a tunnel to the Llamafile server using ngrok.\n\nWhat is the ngrok URL? It might look like: https://[random].ngrok-free.app/",
        "code": "no",
        "type": null
    },
    {
        "question": "Write a Python program that uses httpx to send a POST request to OpenAI's API to analyze the sentiment of this (meaningless) text into GOOD, BAD or NEUTRAL. Specifically:\n\nMake sure you pass an Authorization header with dummy API key.\nUse gpt-4o-mini as the model.\nThe first message must be a system message asking the LLM to analyze the sentiment of the text. Make sure you mention GOOD, BAD, or NEUTRAL as the categories.\nThe second message must be exactly the text contained above.\nThis test is crucial for DataSentinel Inc. as it validates both the API integration and the correctness of message formatting in a controlled environment. Once verified, the same mechanism will be used to process genuine customer feedback, ensuring that the sentiment analysis module reliably categorizes data as GOOD, BAD, or NEUTRAL. This reliability is essential for maintaining high operational standards and swift response times in real-world applications.\n\nNote: This uses a dummy httpx library, not the real one. You can only use:\n\nresponse = httpx.get(url, **kwargs)\nresponse = httpx.post(url, json=None, **kwargs)\nresponse.raise_for_status()\nresponse.json()",
        "code": "no",
        "type": null
    },
    {
        "question": "LexiSolve Inc. is a startup that delivers a conversational AI platform to enterprise clients. The system leverages OpenAI's language models to power a variety of customer service, sentiment analysis, and data extraction features. Because pricing for these models is based on the number of tokens processed—and strict token limits apply—accurate token accounting is critical for managing costs and ensuring system stability.\n\nTo optimize operational costs and prevent unexpected API overages, the engineering team at LexiSolve has developed an internal diagnostic tool that simulates and measures token usage for typical prompts sent to the language model.\n\nOne specific test case an understanding of text tokenization. Your task is to generate data for that test case.\n\nSpecifically, when you make a request to OpenAI's GPT-4o-Mini with just this user message:\n\nList only the valid English words from these: NNSAlv, 6uk7W, 26, n2CK, g8YQDe5Q, BkZ, lj, oXpOPfr9ej, Sk8C, LSeA46CA, QCnK, zkmi1gpBH, wlJka, Jiu7dB8NOw, C, eUiwKIIU, dvVYivJge, sBYUWu, xvR4puPa5, WoO2GeJ7, h3, Lozm6, b1YCY2, kCmHtBLa, gi, i, q9, 4lhPB, GSIJSqOO, Z, FdlaydhBy, wCwQ, lIK6WMqXp, vI8BF, Jqfjaal, ej, K3jYku1, 7o9Pmq, x, uLklRh, ntmK, jRG4ib90, AjjD7a, jkzytbb8, DZmQ, QRZj7j, Onoq, Lb, oSVK00t, whrV, jwcPH5, RzOOk8o, eLjcb, RtQWPph, eAwj7Wy, zbW, CyZR99D, NvQT, 3vfIkomht, MsF, 0pLe, 4wrW4mZKi, 9PrX, 7, obNNOch, r, T5oBTNA, aoNcZSeS, XoO, 9yBi, vT7, o1Ahzk, sEQdzkNA, 6IljH, jqe, 5kdia8, kYvS9w, HK, 2dp5OMTO, eL, D, J, Z0, dIWHUN, FY5cTbhZ, 0D, vfC0, G, X3n\n... how many input tokens does it use up?\n\nNumber of tokens:",
        "code": "no",
        "type": null
    },
    {
        "question": "RapidRoute Solutions is a logistics and delivery company that relies on accurate and standardized address data to optimize package routing. Recently, they encountered challenges with manually collecting and verifying new addresses for testing their planning software. To overcome this, the company decided to create an automated address generator using a language model, which would provide realistic, standardized U.S. addresses that could be directly integrated into their system. The addresses must follow a strict format, which is critical for downstream processes such as geocoding, routing, and verification against customer databases. For consistency and validation, the development team requires that the addresses be returned as structured JSON data with no additional properties that could confuse their parsers. As part of the integration process, you need to write the body of the request to an OpenAI chat completion call that: Uses model gpt-4o-mini Has a system message: Respond in JSON Has a user message: Generate 10 random addresses in the US Uses structured outputs to respond with an object addresses which is an array of objects with required fields: apartment (string) county (string) zip (number) . Sets additionalProperties to false to prevent additional properties. Note that you don't need to run the request or use an API key; your task is simply to write the correct JSON body. What is the JSON body we should send to https://api.openai.com/v1/chat/completions for this?",
        "code": "no",
        "type": null
    },
    {
        "question": "Acme Global Solutions manages hundreds of invoices from vendors every month. To streamline their accounts payable process, the company is developing an automated document processing system. This system uses a computer vision model to extract useful text from scanned invoice images. Critical pieces of data such as vendor email addresses, invoice or transaction numbers, and other details are embedded within these documents.\n\nYour team is tasked with integrating OpenAI's vision model into the invoice processing workflow. The chosen model, gpt-4o-mini, is capable of analyzing both text and image inputs simultaneously. When an invoice is received—for example, an invoice image may contain a vendor email like alice.brown@acmeglobal.com and a transaction number such as 34921. The system needs to extract all embedded text to automatically populate the vendor management system.\n\nThe automated process will send a POST request to OpenAI's API with two inputs in a single user message:\n\nText: A simple instruction \"Extract text from this image.\" Image URL: A base64 URL representing the invoice image that might include the email and the transaction number among other details. Here is an example invoice image:\n\nWrite just the JSON body (not the URL, nor headers) for the POST request that sends these two pieces of content (text and image URL) to the OpenAI API endpoint.\n\nUse gpt-4o-mini as the model. Send a single user message to the model that has a text and an image_url content (in that order). The text content should be Extract text from this image. Send the image_url as a base64 URL of the image above. CAREFUL: Do not modify the image. Write your JSON body here:",
        "code": "no",
        "type": null
    },
    {
        "question": "SecurePay, a leading fintech startup, has implemented an innovative feature to detect and prevent fraudulent activities in real time. As part of its security suite, the system analyzes personalized transaction messages by converting them into embeddings. These embeddings are compared against known patterns of legitimate and fraudulent messages to flag unusual activity.\n\nImagine you are working on the SecurePay team as a junior developer tasked with integrating the text embeddings feature into the fraud detection module. When a user initiates a transaction, the system sends a personalized verification message to the user's registered email address. This message includes the user's email address and a unique transaction code (a randomly generated number). Here are 2 verification messages:\n\nDear user, please verify your transaction code 865 sent to krishna.kumar@gramener.com\nDear user, please verify your transaction code 34456 sent to krishna.kumar@gramener.com\nThe goal is to capture this message, convert it into a meaningful embedding using OpenAI's text-embedding-3-small model, and subsequently use the embedding in a machine learning model to detect anomalies.\n\nYour task is to write the JSON body for a POST request that will be sent to the OpenAI API endpoint to obtain the text embedding for the 2 given personalized transaction verification messages above. This will be sent to the endpoint https://api.openai.com/v1/embeddings.\n\nWrite your JSON body here:",
        "code": "no",
        "type": null
    },
    {
        "question": "ShopSmart is an online retail platform that places a high value on customer feedback. Each month, the company receives hundreds of comments from shoppers regarding product quality, delivery speed, customer service, and more. To automatically understand and cluster this feedback, ShopSmart's data science team uses text embeddings to capture the semantic meaning behind each comment.\n\nAs part of a pilot project, ShopSmart has curated a collection of 25 feedback phrases that represent a variety of customer sentiments. Examples of these phrases include comments like \"Fast shipping and great service,\" \"Product quality could be improved,\" \"Excellent packaging,\" and so on. Due to limited processing capacity during initial testing, you have been tasked with determine which pair(s) of 5 of these phrases are most similar to each other. This similarity analysis will help in grouping similar feedback to enhance the company's understanding of recurring customer issues.\n\nShopSmart has written a Python program that has the 5 phrases and their embeddings as an array of floats. It looks like this:\n\nembeddings = {\"Fast shipping and great service.\":[-0.1079404279589653,0.020684150978922844,-0.30074435472489903,0.11729881167411804,0.13952496647834778,-0.018052106723189354,-0.21843314170837402,0.13527116179466248,-0.09257353842258453,-0.09384968131780624,0.11293865740299225,-0.03900212049484253,-0.059287477284669876,-0.1008152961730957,-0.019155437126755714,-0.007078605704009533,-0.02967032417654991,0.03711449354887009,-0.18302017450332642,0.20056714117527008,0.09076566994190216,0.02584189549088478,0.0943814069032669,-0.03799184039235115,-0.25246360898017883,-0.1235731765627861,0.028952494263648987,-0.309251993894577,0.021375395357608795,-0.22204887866973877,0.2159872055053711,-0.11921302229166031,0.21928390860557556,-0.11432114243507385,0.017453914508223534,0.10065577924251556,-0.04200637340545654,0.17493793368339539,0.1322934925556183,0.17025874555110931,-0.15271177887916565,0.004682514350861311,0.2531017065048218,0.11580997705459595,0.014688937924802303,-0.11176885664463043,-0.292662113904953,-0.0397731214761734,0.13729171454906464,0.027570005506277084],\"Customer service resolved my issue quickly.\":[-0.27243417501449585,-0.08034132421016693,-0.3335980772972107,0.03278002515435219,-0.0688093826174736,-0.11652996391057968,-0.13710907101631165,0.2432539016008377,0.07779283076524734,0.0949951708316803,0.1365993618965149,-0.05979407951235771,-0.17151375114917755,-0.040170662105083466,0.12054384499788284,0.10894818603992462,-0.1374913454055786,-0.008736561983823776,-0.2501348555088043,0.040648505091667175,0.20974119007587433,0.021232154220342636,0.1484498679637909,-0.07186757773160934,-0.26733720302581787,0.24248935282230377,-0.04475795477628708,-0.1304829716682434,-0.11914216727018356,-0.2516639530658722,0.16577963531017303,-0.1684555560350418,-0.08875136077404022,-0.1995472013950348,-0.10072928667068481,0.1209898293018341,0.11015872657299042,-0.053359128534793854,0.16705389320850372,0.0013867400120943785,-0.018269527703523636,0.014486604370176792,0.08320838212966919,0.06033563241362572,-0.07224985212087631,0.09869049489498138,-0.021837422624230385,0.1448819786310196,0.10996758937835693,0.058328691869974136],\"Shipping costs were too high.\":[-0.02132924273610115,-0.05078135058283806,0.24659079313278198,0.03407837450504303,-0.031469374895095825,0.04534817487001419,-0.14255358278751373,0.028483819216489792,-0.0895128846168518,0.05390138924121857,-0.0863390564918518,0.025431020185351372,-0.10597378760576248,0.02617068588733673,0.04362677410244942,-0.020603027194738388,0.1553564965724945,-0.12254228442907333,-0.3750503957271576,0.08009897172451019,0.13728179037570953,0.17526021599769592,-0.08456385880708694,-0.21130205690860748,-0.06810295581817627,0.008573387749493122,0.2928534746170044,-0.27736085653305054,0.12576991319656372,-0.23002229630947113,0.1522364616394043,-0.13523761928081512,0.16622285544872284,-0.1358831524848938,-0.32512974739074707,0.04222813621163368,-0.11146076023578644,0.23475615680217743,0.1606282889842987,0.07009332627058029,-0.08875977247953415,-0.0171198770403862,0.1295354813337326,0.033890094608068466,0.039941899478435516,0.14147770404815674,0.10349927842617035,-0.037790145725011826,0.022405119612812996,-0.013334139250218868],\"The item arrived damaged.\":[0.04743589088320732,0.3924431800842285,-0.19287808239459991,0.0009346450679004192,-0.02529826946556568,0.007183298002928495,-0.12663501501083374,-0.1648762822151184,-0.09184173494577408,0.021719681099057198,-0.016338737681508064,0.1440839022397995,0.015228591859340668,-0.13091887533664703,-0.027949560433626175,0.14481529593467712,0.1035439744591713,-0.026539022102952003,-0.29924315214157104,0.04913375899195671,0.01723991520702839,0.14533771574497223,0.036674004048109055,-0.19653503596782684,-0.05490652099251747,-0.04375281557440758,0.25682249665260315,-0.1878628432750702,0.11273860186338425,0.08703545480966568,0.229447603225708,-0.07084038108587265,0.25891217589378357,-0.030300457030534744,0.018637394532561302,0.19883368909358978,-0.0997825413942337,0.2977803647518158,0.005384208634495735,0.03330438211560249,-0.07449733465909958,-0.022646980360150337,-0.07622132450342178,0.25598663091659546,-0.10782783478498459,0.12287358194589615,-0.02471054531633854,0.16644354164600372,-0.05433185398578644,-0.04077501222491264],\"Product quality could be improved.\":[0.02994030900299549,0.0700574517250061,-0.09608972817659378,0.0757998675107956,0.05681799724698067,-0.12199439853429794,0.1026616021990776,0.34097179770469666,0.10221496969461441,-0.022985607385635376,0.00909215584397316,-0.12154776602983475,-0.33331525325775146,-0.03502872586250305,0.09934376925230026,-0.07471518963575363,0.232376366853714,-0.1896272748708725,-0.17048589885234833,0.0928356945514679,0.21285215020179749,0.060550566762685776,0.17584548890590668,0.05365967005491257,0.0439932718873024,0.0900282934308052,0.18656465411186218,-0.18146029114723206,-0.006986604072153568,-0.11421024054288864,0.14624014496803284,-0.19919796288013458,0.14802667498588562,-0.062432803213596344,-0.26695844531059265,0.0347416065633297,0.3560296893119812,0.1255674511194229,0.022554926574230194,-0.060359153896570206,-0.0147787407040596,0.09608972817659378,0.043897565454244614,0.11484828591346741,0.15619367361068726,-0.04826818034052849,0.020592935383319855,-0.09813147783279419,0.06405982375144958,-0.08907122164964676]}\nYour task is to write a Python function most_similar(embeddings) that will calculate the cosine similarity between each pair of these embeddings and return the pair that has the highest similarity. The result should be a tuple of the two phrases that are most similar.\n\nWrite your Python code here:",
        "code": "no",
        "type": null
    },
    {
        "question": "InfoCore Solutions is a technology consulting firm that maintains an extensive internal knowledge base of technical documents, project reports, and case studies. Employees frequently search through these documents to answer client questions quickly or gain insights for ongoing projects. However, due to the sheer volume of documentation, traditional keyword-based search often returns too many irrelevant results.\n\nTo address this issue, InfoCore's data science team decides to integrate a semantic search feature into their internal portal. This feature uses text embeddings to capture the contextual meaning of both the documents and the user's query. The documents are pre-embedded, and when an employee submits a search query, the system computes the similarity between the query's embedding and those of the documents. The API then returns a ranked list of document identifiers based on similarity.\n\nImagine you are an engineer on the InfoCore team. Your task is to build a FastAPI POST endpoint that accepts an array of docs and query string via a JSON body. The endpoint is structured as follows:\n\nPOST /similarity\n\n{\n  \"docs\": [\"Contents of document 1\", \"Contents of document 2\", \"Contents of document 3\", ...],\n  \"query\": \"Your query string\"\n}\nService Flow:\n\nRequest Payload: The client sends a POST request with a JSON body containing:\ndocs: An array of document texts from the internal knowledge base.\nquery: A string representing the user's search query.\nEmbedding Generation: For each document in the docs array and for the query string, the API computes a text embedding using text-embedding-3-small.\nSimilarity Computation: The API then calculates the cosine similarity between the query embedding and each document embedding. This allows the service to determine which documents best match the intent of the query.\nResponse Structure: After ranking the documents by their similarity scores, the API returns the identifiers (or positions) of the three most similar documents. The JSON response might look like this:\n\n{\n  \"matches\": [\"Contents of document 3\", \"Contents of document 1\", \"Contents of document 2\"]\n}\nHere, \"Contents of document 3\" is considered the closest match, followed by \"Contents of document 1\", then \"Contents of document 2\".\n\nMake sure you enable CORS to allow OPTIONS and POST methods, perhaps allowing all origins and headers.\n\nWhat is the API URL endpoint for your implementation? It might look like: http://127.0.0.1:8000/similarity",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "TechNova Corp. is a multinational corporation that has implemented a digital assistant to support employees with various internal tasks. The assistant can answer queries related to human resources, IT support, and administrative services. Employees use a simple web interface to enter their requests, which may include: Checking the status of an IT support ticket. Scheduling a meeting. Retrieving their current expense reimbursement balance. Requesting details about their performance bonus. Reporting an office issue by specifying a department or issue number. Each question is direct and templatized, containing one or more parameters such as an employee or ticket number (which might be randomized). In the backend, a FastAPI app routes each request by matching the query to one of a set of pre-defined functions. The response that the API returns is used by OpenAI to call the right function with the necessary arguments. Pre-Defined Functions: For this exercise, assume the following functions have been defined: get_ticket_status(ticket_id: int) schedule_meeting(date: str, time: str, meeting_room: str) get_expense_balance(employee_id: int) calculate_performance_bonus(employee_id: int, current_year: int) report_office_issue(issue_code: int, department: str) Each function has a specific signature, and the student's FastAPI app should map specific queries to these functions. Example Questions (Templatized with a Random Number): Ticket Status: Query: \"What is the status of ticket 83742?\" → Should map to get_ticket_status(ticket_id=83742) Meeting Scheduling: Query: \"Schedule a meeting on 2025-02-15 at 14:00 in Room A.\" → Should map to schedule_meeting(date=\"2025-02-15\", time=\"14:00\", meeting_room=\"Room A\") Expense Reimbursement: Query: \"Show my expense balance for employee 10056.\" → Should map to get_expense_balance(employee_id=10056) Performance Bonus Calculation: Query: \"Calculate performance bonus for employee 10056 for 2025.\" → Should map to calculate_performance_bonus(employee_id=10056, current_year=2025) Office Issue Reporting: Query: \"Report office issue 45321 for the Facilities department.\" → Should map to report_office_issue(issue_code=45321, department=\"Facilities\") Task Overview: Develop a FastAPI application that: Exposes a GET endpoint /execute?q=... where the query parameter q contains one of the pre-templatized questions. Analyzes the q parameter to identify which function should be called. Extracts the parameters from the question text. Returns a response in the following JSON format: { \"name\": \"function_name\", \"arguments\": \"{ ...JSON encoded parameters... }\" } For example, the query \"What is the status of ticket 83742?\" should return: { \"name\": \"get_ticket_status\", \"arguments\": \"{\"ticket_id\": 83742}\" } Make sure you enable CORS to allow GET requests from any origin. What is the API URL endpoint for your implementation? It might look like: http://127.0.0.1:8000/execute",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "SecurePrompt Technologies is a cybersecurity firm that specializes in deploying large language models (LLMs) for sensitive enterprise applications. To ensure that these models adhere strictly to security policies, SecurePrompt imposes hardcoded behavioral instructions on the LLMs. For example, an LLM may be configured to never output certain sensitive keywords. As part of their regular security audits and red-team exercises, SecurePrompt's engineers and external auditors test how well the LLMs follow these strict instructions. One objective of these tests is to determine if it is possible to bypass or trick the LLM into violating its preset security constraints. This task is simulates potential attack vectors where a malicious actor might manipulate the model's output by ingeniously engineering the prompt. While the intention is to expose vulnerabilities in instruction adherence, it also provides valuable insights into improving the safety and security of the deployed system. Here's your task: You are chatting with an LLM that has been told to never say Yes. You need to get it to say Yes. Use your AI Proxy token when prompted. Write a prompt that will get the LLM to say Yes",
        "code": "no",
        "type": null
    },
    {
        "question": "ESPN Cricinfo has ODI batting stats for each batsman. The result is paginated across multiple pages. Count the number of ducks in page number 31.\n\nUnderstanding the Data Source: ESPN Cricinfo's ODI batting statistics are spread across multiple pages, each containing a table of player data. Go to page number 31.\nSetting Up Google Sheets: Utilize Google Sheets' IMPORTHTML function to import table data from the URL for page number 31.\nData Extraction and Analysis: Pull the relevant table from the assigned page into Google Sheets. Locate the column that represents the number of ducks for each player. (It is titled \"0\".) Sum the values in the \"0\" column to determine the total number of ducks on that page.\nImpact\nBy automating the extraction and analysis of cricket batting statistics, CricketPro Insights can:\n\nEnhance Analytical Efficiency: Reduce the time and effort required to manually gather and process player performance data.\nProvide Timely Insights: Deliver up-to-date statistical analyses that aid teams and coaches in making informed decisions.\nScalability: Easily handle large volumes of data across multiple pages, ensuring comprehensive coverage of player performances.\nData-Driven Strategies: Enable the development of data-driven strategies for player selection, training focus areas, and game planning.\nClient Satisfaction: Improve service offerings by providing accurate and insightful analytics that meet the specific needs of clients in the cricketing world.\nWhat is the total number of ducks across players on page number 31 of ESPN Cricinfo's ODI batting stats?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Source: Utilize IMDb's advanced web search at https://www.imdb.com/search/title/ to access movie data. Filter: Filter all titles with a rating between 5 and 7. Format: For up to the first 25 titles, extract the necessary details: ID, title, year, and rating. The ID of the movie is the part of the URL after tt in the href attribute. For example, tt10078772. Organize the data into a JSON structure as follows: [ { \"id\": \"tt1234567\", \"title\": \"Movie 1\", \"year\": \"2021\", \"rating\": \"5.8\" }, { \"id\": \"tt7654321\", \"title\": \"Movie 2\", \"year\": \"2019\", \"rating\": \"6.2\" }, // ... more titles ] Submit: Submit the JSON data in the text box below.",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "",
        "code": "no",
        "type": null
    },
    {
        "question": "Write a web application that exposes an API with a single query parameter: ?country=. It should fetch the Wikipedia page of the country, extracts all headings (H1 to H6), and create a Markdown outline for the country. The outline should look like this:\n\n\n## Contents\n\n# Vanuatu\n\n## Etymology\n\n## History\n\n### Prehistory\n\n...\nAPI Development: Choose any web framework (e.g., FastAPI) to develop the web application. Create an API endpoint (e.g., /api/outline) that accepts a country query parameter.\nFetching Wikipedia Content: Find out the Wikipedia URL of the country and fetch the page's HTML.\nExtracting Headings: Use an HTML parsing library (e.g., BeautifulSoup, lxml) to parse the fetched Wikipedia page. Extract all headings (H1 to H6) from the page, maintaining order.\nGenerating Markdown Outline: Convert the extracted headings into a Markdown-formatted outline. Headings should begin with #.\nEnabling CORS: Configure the web application to include appropriate CORS headers, allowing GET requests from any origin.\nWhat is the URL of your API endpoint?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "As part of this initiative, you are tasked with developing a system that automates the following:\n\nAPI Integration and Data Retrieval: Use the BBC Weather API to fetch the weather forecast for Rio de Janeiro. Send a GET request to the locator service to obtain the city's locationId. Include necessary query parameters such as API key, locale, filters, and search term (city).\nWeather Data Extraction: Retrieve the weather forecast data using the obtained locationId. Send a GET request to the weather broker API endpoint with the locationId.\nData Transformation: Extract the localDate and enhancedWeatherDescription from each day's forecast. Iterate through the forecasts array in the API response and map each localDate to its corresponding enhancedWeatherDescription. Create a JSON object where each key is the localDate and the value is the enhancedWeatherDescription.\nThe output would look like this:\n\n{\n  \"2025-01-01\": \"Sunny with scattered clouds\",\n  \"2025-01-02\": \"Partly cloudy with a chance of rain\",\n  \"2025-01-03\": \"Overcast skies\",\n  // ... additional days\n}\nWhat is the JSON weather forecast description for Rio de Janeiro?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "What is the maximum latitude of the bounding box of the city Buenos Aires in the country Argentina on the Nominatim API?\n\nAPI Integration: Use the Nominatim API to fetch geospatial data for a specified city within a country via a GET request to the Nominatim API with parameters for the city and country. Ensure adherence to Nominatim's usage policies, including rate limiting and proper attribution.\nData Retrieval and Filtering: Parse the JSON response from the API. If multiple results are returned (e.g., multiple cities named \"Springfield\" in different states), filter the results based on the provided osm_id ending to select the correct city instance.\nParameter Extraction: Access the boundingbox attribute. Depending on whether you're looking for the minimum or maximum latitude, extract the corresponding latitude value.\nImpact\nBy automating the extraction and processing of bounding box data, UrbanRide can:\n\nOptimize Routing: Enhance route planning algorithms with precise geographical boundaries, reducing delivery times and operational costs.\nImprove Fleet Allocation: Allocate vehicles more effectively across defined service zones based on accurate city extents.\nEnhance Market Analysis: Gain deeper insights into regional performance, enabling targeted marketing and service improvements.\nScale Operations: Seamlessly integrate new cities into their service network with minimal manual intervention, ensuring consistent data quality.\nWhat is the maximum latitude of the bounding box of the city Buenos Aires in the country Argentina on the Nominatim API? Value of the maximum latitude",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Search using the Hacker News RSS API for the latest Hacker News post mentioning Productivity and having a minimum of 76 points. What is the link that it points to?\n\nAutomate Data Retrieval: Utilize the HNRSS API to fetch the latest Hacker News posts. Use the URL relevant to fetching the latest posts, searching for topics and filtering by a minimum number of points.\nExtract and Present Data: Extract the most recent <item> from this result. Get the <link> tag inside it.\nShare the result: Type in just the URL in the answer.\nWhat is the link to the latest Hacker News post mentioning Productivity having at least 76 points?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Using the GitHub API, find all users located in the city Dublin with over 100 followers.\n\nWhen was the newest user's GitHub profile created?\n\nAPI Integration and Data Retrieval: Leverage GitHub's search endpoints to query users by location and filter them by follower count.\nData Processing: From the returned list of GitHub users, isolate those profiles that meet the specified criteria.\nSort and Format: Identify the \"newest\" user by comparing the created_at dates provided in the user profile data. Format the account creation date in the ISO 8601 standard (e.g., \"2024-01-01T00:00:00Z\").\nImpact\nBy automating this data retrieval and filtering process, CodeConnect gains several strategic advantages:\n\nTargeted Recruitment: Quickly identify new, promising talent in key regions, allowing for more focused and timely recruitment campaigns.\nCompetitive Intelligence: Stay updated on emerging trends within local developer communities and adjust talent acquisition strategies accordingly.\nEfficiency: Automating repetitive data collection tasks frees up time for recruiters to focus on engagement and relationship-building.\nData-Driven Decisions: Leverage standardized and reliable data to support strategic business decisions in recruitment and market research.\nEnter the date (ISO 8601, e.g. \"2024-01-01T00:00:00Z\") when the newest user joined GitHub.",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Create a scheduled GitHub action that runs daily and adds a commit to your repository. The workflow should:\n\nUse schedule with cron syntax to run once per day (must use specific hours/minutes, not wildcards)\nInclude a step with your email krishna.kumar@gramener.com in its name\nCreate a commit in each run\nBe located in .github/workflows/ directory\nAfter creating the workflow:\n\nTrigger the workflow and wait for it to complete\nEnsure it appears as the most recent action in your repository\nVerify that it creates a commit during or within 5 minutes of the workflow run",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "This file q-extract-tables-from-pdf.pdf contains a table of student marks in Maths, Physics, English, Economics, and Biology.\n\nCalculate the total Biology marks of students who scored 29 or more marks in Physics in groups 1-34 (including both groups).\n\nData Extraction: Retrieve the PDF file containing the student marks table and use PDF parsing libraries (e.g., Tabula, Camelot, or PyPDF2) to accurately extract the table data into a workable format (e.g., CSV, Excel, or a DataFrame).\nData Cleaning and Preparation: Convert marks to numerical data types to facilitate accurate calculations.\nData Filtering: Identify students who have scored 29 or more marks in Physics in groups 1-34 (including both groups).\nCalculation: Sum the Biology marks of the filtered students to obtain the total marks for this specific cohort.\nBy automating the extraction and analysis of student marks, EduAnalytics empowers Greenwood High School to make informed decisions swiftly. This capability enables the school to:\n\nIdentify Performance Trends: Quickly spot areas where students excel or need additional support.\nAllocate Resources Effectively: Direct teaching resources and interventions to groups and subjects that require attention.\nEnhance Reporting Efficiency: Reduce the time and effort spent on manual data processing, allowing educators to focus more on teaching and student engagement.\nSupport Data-Driven Strategies: Use accurate and timely data to shape educational strategies and improve overall student outcomes.\nWhat is the total Biology marks of students who scored 29 or more marks in Physics in groups 1-34 (including both groups)?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "As part of the Documentation Transformation Project, you are a junior developer at EduDocs tasked with developing a streamlined workflow for converting PDF files to Markdown and ensuring their consistent formatting. This project is critical for supporting EduDocs' commitment to delivering high-quality, accessible educational resources to its clients.\n\nq-pdf-to-markdown.pdf has the contents of a sample document.\n\nConvert the PDF to Markdown: Extract the content from the PDF file. Accurately convert the extracted content into Markdown format, preserving the structure and formatting as much as possible.\nFormat the Markdown: Use Prettier version 3.4.2 to format the converted Markdown file.\nSubmit the Formatted Markdown: Provide the final, formatted Markdown file as your submission.What is the markdown content of the PDF, formatted with prettier@3.4.2?",
        "code": "yes",
        "type": "python"
    },
    {
        "question": "Your task as a data analyst at EngageMetrics is to write a query that performs the following:\n\nFilter Posts by Date: Consider only posts with a timestamp greater than or equal to a specified minimum time (2025-02-12T07:19:32.205Z), ensuring that the analysis focuses on recent posts.\nEvaluate Comment Quality: From these recent posts, identify posts where at least one comment has received more than a given number of useful stars (2). This criterion filters out posts with low or mediocre engagement.\nExtract and Sort Post IDs: Finally, extract all the post_id values of the posts that meet these criteria and sort them in ascending order.\nBy accurately extracting these high-impact post IDs, EngageMetrics can:\n\nEnhance Reporting: Provide clients with focused insights on posts that are currently engaging audiences effectively.\nTarget Content Strategy: Help marketing teams identify trending content themes that generate high-quality user engagement.\nOptimize Resource Allocation: Enable better prioritization for content promotion and further in-depth analysis of high-performing posts.\nWrite a DuckDB SQL query to find all posts IDs after 2025-02-12T07:19:32.205Z with at least 1 comment with 2 useful stars, sorted. The result should be a table with a single column called post_id, and the relevant post IDs should be sorted in ascending order.",
        "code": "no",
        "type": null
    },
    {
        "question": "Mystery Tales Publishing is an independent publisher specializing in mystery and suspense audiobooks. To broaden their audience and improve accessibility, they have been uploading narrated versions of their stories to YouTube. In addition to reaching visually impaired users, they want to leverage transcripts for content summarization, search indexing, and social media promotion.\n\nThe company has identified that certain segments of their mystery story audiobooks generate the most engagement. However, transcribing entire videos can be time-consuming and may include irrelevant content. Therefore, they have decided to focus on transcribing only the most compelling segments. For instance, a particular segment—from 381.7 to 448.6—is known to captivate listeners with a twist in the plot. An accurate transcript of this segment will:\n\nEnhance accessibility by providing a text alternative for hearing-impaired users.\nImprove search engine optimization (SEO) through indexed keywords.\nSupport content analysis and summarization for promotional purposes.\nAs part of a pilot project, you are tasked with transcribing the YouTube video segment of a mystery story audiobook. You are provided with a sample video that features a narrated mystery story. Your focus will be on the segment starting at 381.7 and ending at 448.6.\n\nYour transcription should:\n\nAccurately capture all spoken dialogue and descriptive narration.\nInclude appropriate punctuation and paragraph breaks to reflect natural speech.\nExclude any extraneous noise or background commentary not relevant to the narrative.\nYour Task\nAccess the Video: Use the provided YouTube link to access the mystery story audiobook.\nConvert to Audio: Extract the audio for the segment between 381.7 and 448.6.\nTranscribe the Segment: Utilize automated speech-to-text tools as needed.\nBy producing an accurate transcript of this key segment, Mystery Tales Publishing will be able to:\n\nBoost Accessibility: Provide high-quality captions and text alternatives for hearing-impaired users.\nEnhance SEO: Improve the discoverability of their content through better keyword indexing.\nDrive Engagement: Use the transcript for social media snippets, summaries, and promotional materials.\nEnable Content Analysis: Facilitate further analysis such as sentiment analysis, topic modeling, and reader comprehension studies.\nWhat is the text of the transcript of this Mystery Story Audiobook between 381.7 and 448.6 seconds?",
        "code": "yes",
        "type": "python"
    }
]